from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from database.database import SessionLocal
from database.models import Book
from keyboards.inline import books_keyboard
from aiogram.types import ReplyKeyboardRemove

router = Router()

@router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø LibraryBot üìöü§ñ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /download –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞, /upload –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –∏ /lang –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞. üòâ", reply_markup=ReplyKeyboardRemove())

@router.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äì –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ üöÄ\n/help ‚Äì –ø–æ–º–æ—â—å üí°\n/download ‚Äì –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–Ω–∏–≥ üìñ\n/upload ‚Äì –∑–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏ üì•\n/lang ‚Äì –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ üåê", reply_markup=ReplyKeyboardRemove())

@router.message(Command("download"))
async def download_cmd(message: types.Message):
    session = SessionLocal()
    page = 0
    books = session.query(Book).limit(10).offset(page * 10).all()
    session.close()
    if not books:
        await message.answer("–í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥ üòï")
        return
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏:\n"
    for i, book in enumerate(books):
        text += f"{i+1}. {book.author} - {book.title}\n"
    kb = books_keyboard(page, len(books))
    await message.answer(text, reply_markup=kb)

@router.callback_query(lambda c: c.data == "download_cancel")
async def download_cancel(callback: types.CallbackQuery):
    await callback.message.edit_text("–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—Ç–º–µ–Ω—ë–Ω. ‚ùå")
    await callback.answer()

@router.callback_query(F.data.startswith("page_"))
async def paginate(callback: types.CallbackQuery):
    data = callback.data.split("_")
    page = int(data[1])
    direction = data[2]
    new_page = page - 1 if direction == "left" else page + 1
    session = SessionLocal()
    books = session.query(Book).limit(10).offset(new_page * 10).all()
    session.close()
    if not books:
        await callback.answer("–ù–µ—Ç –∫–Ω–∏–≥ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ üòï", show_alert=True)
        return
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏:\n"
    for i, book in enumerate(books):
        text += f"{i+1}. {book.author} - {book.title}\n"
    kb = books_keyboard(new_page, len(books))
    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("book_"))
async def select_book(callback: types.CallbackQuery):
    _, page, index = callback.data.split("_")
    page = int(page)
    index = int(index) - 1
    session = SessionLocal()
    books = session.query(Book).limit(10).offset(page * 10).all()
    session.close()
    if index < len(books):
        book = books[index]
        await callback.message.answer_document(document=book.file_id, caption=f"{book.author} - {book.title} üìö")
    await callback.answer()
