from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.database import SessionLocal
from database.models import Book
import html

router = Router()

cat_map = {
    "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "HL",
    "–ù–æ–Ω-—Ñ–∏–∫—à–µ–Ω": "NF",
    "–î–µ—Ç—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "DL",
    "–§—ç–Ω—Ç–µ–∑–∏": "F",
    "–î–µ—Ç–µ–∫—Ç–∏–≤—ã": "D",
    "–£–∂–∞—Å—ã": "U",
    "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": "P",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": "FA",
    "–ö–æ–º–∏–∫—Å—ã": "K",
    "–ú–∞–Ω–≥–∞": "M",
    "–£—á–µ–±–Ω–∏–∫–∏": "UCH",
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": "PSY",
    "–ù–∞—É—á–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "NL",
    "–Ø–∑—ã–∫–æ–≤–µ–¥–µ–Ω–∏–µ": "YAZ",
    "–ë–∏–æ–ª–æ–≥–∏—è": "BIO",
    "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏": "OSN",
    "–•–∏–º–∏—è": "HIM",
    "–§–∏–∑–∏–∫–∞": "FIZ",
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "MAT",
    "–ö–Ω–∏–≥–∏ –¥–ª—è –¥–æ—à–∫–æ–ª—å–Ω–∏–∫–æ–≤": "KD",
    "–í–Ω–µ–∫–ª–∞—Å—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ": "VC",
    "–ö–Ω–∏–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤": "KT"
}
reverse_cat_map = {v: k for k, v in cat_map.items()}

catalog_structure = {
    "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": {
        "–§—ç–Ω—Ç–µ–∑–∏": {},
        "–î–µ—Ç–µ–∫—Ç–∏–≤—ã": {},
        "–£–∂–∞—Å—ã": {},
        "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": {},
        "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": {},
        "–ö–æ–º–∏–∫—Å—ã": {},
        "–ú–∞–Ω–≥–∞": {}
    },
    "–ù–æ–Ω-—Ñ–∏–∫—à–µ–Ω": {
         "–£—á–µ–±–Ω–∏–∫–∏": {
             "–Ø–∑—ã–∫–æ–≤–µ–¥–µ–Ω–∏–µ": {},
             "–ë–∏–æ–ª–æ–≥–∏—è": {},
             "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏": {},
             "–•–∏–º–∏—è": {},
             "–§–∏–∑–∏–∫–∞": {},
             "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {}
         },
         "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": {},
         "–ù–∞—É—á–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": {}
    },
    "–î–µ—Ç—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": {
         "–ö–Ω–∏–≥–∏ –¥–ª—è –¥–æ—à–∫–æ–ª—å–Ω–∏–∫–æ–≤": {},
         "–í–Ω–µ–∫–ª–∞—Å—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ": {},
         "–ö–Ω–∏–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤": {}
    }
}

def get_current_level(path: list) -> dict:
    current = catalog_structure
    for p in path:
        current = current.get(p, {})
    return current

def build_catalog_keyboard(path: list) -> InlineKeyboardMarkup:
    current_level = get_current_level(path)
    keyboard = []
    if current_level:
        for option in current_level.keys():
            abbr = cat_map.get(option, option)
            new_path = path + [option]
            abbr_path = [cat_map.get(item, item) for item in new_path]
            callback_data = "catalog|" + "|".join(abbr_path)
            keyboard.append([InlineKeyboardButton(text=option, callback_data=callback_data)])
        nav_row = []
        if path:
            new_path = path[:-1]
            abbr_path = [cat_map.get(item, item) for item in new_path]
            callback_data = "catalog|" + "|".join(abbr_path) if new_path else "catalog|"
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data))
        nav_row.append(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="catalog_cancel"))
        keyboard.append(nav_row)
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    else:
        return InlineKeyboardMarkup(inline_keyboard=[])

def build_books_keyboard(books: list) -> InlineKeyboardMarkup:
    keyboard = []
    row = []
    for i, book in enumerate(books):
        row.append(InlineKeyboardButton(text=str(i+1), callback_data=f"book_{book.id}"))
        if (i+1) % 5 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data == "catalog")
async def catalog_menu(callback: types.CallbackQuery):
    kb = build_catalog_keyboard([])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä üìö:", reply_markup=kb)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("catalog|"))
async def catalog_navigation(callback: types.CallbackQuery):
    data = callback.data.split("|")
    abbr_path = data[1:] if len(data) > 1 else []
    path_full = [reverse_cat_map.get(item, item) for item in abbr_path]
    current_level = get_current_level(path_full)
    if current_level:
        kb = build_catalog_keyboard(path_full)
        current_category = " > ".join(path_full)
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä üìö: {current_category}", reply_markup=kb)
    else:
        genre = path_full[-1] if path_full else ""
        session = SessionLocal()
        books = session.query(Book).filter(Book.genre == genre).all()
        session.close()
        if books:
            text = f"–ö–Ω–∏–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{html.escape(genre)}¬ª üìö:\n"
            for i, book in enumerate(books):
                text += f"{i+1}. {book.author} - {book.title}\n"
            kb = build_books_keyboard(books)
            await callback.message.edit_text(text, reply_markup=kb)
        else:
            await callback.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{html.escape(genre)}¬ª –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–∑—É –∫–æ–º–∞–Ω–¥–æ–π /upload –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("book_"))
async def select_catalog_book(callback: types.CallbackQuery):
    book_id = int(callback.data.split("_")[1])
    session = SessionLocal()
    book = session.query(Book).filter_by(id=book_id).first()
    session.close()
    if book:
        await callback.message.answer_document(document=book.file_id, caption=f"{book.author} - {book.title} üìö")
    await callback.answer()

@router.callback_query(lambda c: c.data == "catalog_cancel")
async def catalog_cancel(callback: types.CallbackQuery):
    await callback.message.edit_text("–ö–∞—Ç–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω ‚ùå")
    await callback.answer()
